{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","output","model","data","im","ctx","load_model","sliderStyle","position","width","height","railStyle","marginTop","borderRadius","backgroundColor","values","labels","datasets","label","borderColor","App","this","canvas","getContext","image","Image","src","onload","drawImage","ref","reference","options","title","display","text","fontSize","legend","maintainAspectRatio","onClick","chart","chartInstance","Array","from","length","Math","random","update","input","tf","predict","err","alert","mul","dataSync","buffer","Uint8ClampedArray","ImageData","i","y","x","pos","set","createImageBitmap","then","renderer","inference","rootStyle","domain","step","mode","getRailProps","style","handles","getHandleProps","className","map","handle","Handle","key","id","right","tracks","getTrackProps","source","target","Track","React","Component","setvariable","net","a","percent","value","left","marginLeft","zIndex","border","textAlign","cursor","color","rootElement","document","getElementById","ReactDOM","render","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c2f42cec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { Navbar, NavbarBrand } from 'reactstrap';\n\nimport {Line} from 'react-chartjs-2';\nimport ReactDOM from 'react-dom';\n\nimport * as tf from '@tensorflow/tfjs';\n\nimport { Slider, Rail, Handles, Tracks, Ticks } from \"react-compound-slider\";\n\n//placeholder variables\nvar imageData;\nvar output;\nvar model;\nvar data;\nvar im;\nvar ctx;\n//preload model\nload_model()\n\nconst sliderStyle = {  // Give the slider some width\n  position: 'relative',\n  width: '100%',\n  height: 80,\n}\n\nconst railStyle = {\n  position: 'absolute',\n  width: '100%',\n  height: 10,\n  marginTop: 35,\n  borderRadius: 5,\n  backgroundColor: '#87abff'\n}\n\nconst values = {\n  labels: ['Input 1','Input 2','Input 3','Input 4','Input 5','Input 6','Input 7','Input 8','Input 9','Input 10','Input 11','Input 12','Input 13','Input 14','Input 15','Input 16','Input 17','Input 18','Input 19','Input 20','Input 21','Input 22','Input 23','Input 24','Input 25','Input 26','Input 27','Input 28','Input 29','Input 30','Input 31','Input 32','Input 33','Input 34','Input 35','Input 36','Input 37','Input 38','Input 39','Input 40','Input 41','Input 42','Input 43','Input 44','Input 45','Input 46','Input 47','Input 48','Input 49','Input 50','Input 51','Input 52','Input 53','Input 54','Input 55','Input 56','Input 57','Input 58','Input 59','Input 60','Input 61','Input 62','Input 63','Input 64'],\n  datasets: [\n    {\n      label: 'Noise Value',\n      backgroundColor: 'rgba(66,99,198,1)',\n      borderColor: 'rgba(0,0,0,1)',\n      data: [0.1533957075325317,-1.58510832711727,-0.5679621856233572,-0.22989065330372507,1.4183772138136732,-1.2468029349794898,-1.2051935339422708,-1.0442318519821505,-1.6769131996724995,1.1491812482260284,-1.2672462777542248,-0.03343584898005753,-0.6724373471902428,-1.3222689568115393,1.6130868726156062,1.7565920150950003,-0.8472816223133163,-0.33666954049364944,-0.11821532843817861,0.3159032792528481,0.581500226839183,-2.308071132122343,0.2637956797299091,-1.0608846087058261,0.4843082462379539,1.7966635532479174,-0.14499561258420074,0.6096379809977133,-0.900116038413073,0.6868910391225435,-0.8170558867910737,-0.5482030113720731,-0.5518926871437861,-0.8811677938928193,-1.7314521817567603,-1.1108296557547537,-0.6160240838271555,-0.17521508861242566,1.2598100516601305,-0.11115556827705302,-0.20534920289289502,0.3970722244763261,0.6642932084275649,-1.1545425936668612,-0.616160067848653,0.30680111168846336,-0.21665498142506925,-0.05383124314705794,-1.5588969856854797,1.3921709260735906,-0.8486533455143497,0.07737294965453935,0.6266643699548351,1.7948535325875354,0.12139088419197602,2.2579284674420603,0.34811963818965197,0.8341972487966769,0.14769602272658452,0.28110251194115277,0.431234836138935,0.41247882955229376,1.3160870509618487,0.22996196631594146]\n    }\n  ]\n}\n\n\n\nexport default class App extends React.Component {\n  componentDidMount() {\n    ctx = this.canvas.getContext('2d');\n\n    const image = new Image();\n    image.src = \"https://i.imgur.com/fnITIwz.png\";\n    image.onload = () => {\n      ctx.drawImage(image, 0, 0, 256, 256);\n    };\n  }\n  render() {\n    return (\n      <div>\n        <Line\n          data={values}\n          width={300}\n          height={75}\n          ref = {(reference) => this.reference = reference}\n          options={{\n            title:{\n              display:true,\n              text:'Input Space of GAN',\n              fontSize:20\n            },\n            legend:{\n              display:false,\n              position:'right'\n            },\n            maintainAspectRatio: true\n          }}\n        />\n      <br />\n      <center><button onClick={() => randomData(this.reference.chartInstance)}>\n        Randomize Data\n      </button></center>\n      <center>\n        <br />\n        <h2>Generated Face</h2>\n        <br />\n        <canvas ref={(canvas)=>this.canvas=canvas} height=\"256\" width=\"256\"></canvas>\n      </center>\n      <br />\n      <Slider rootStyle={sliderStyle} domain={[0, 100]} step={1} mode={1} values={[50]}>\n        <Rail>\n          {({ getRailProps }) => (\n            <div style={railStyle} {...getRailProps()} />\n          )}\n        </Rail>\n        <Handles>\n          {({ handles, getHandleProps }) => (\n            <div className=\"slider-handles\">\n              {handles.map(handle => (\n                <Handle\n                  key={handle.id}\n                  handle={handle}\n                  getHandleProps={getHandleProps}\n                />\n              ))}\n            </div>\n          )}\n        </Handles>\n        <Tracks right={false}>\n          {({ tracks, getTrackProps }) => (\n            <div className=\"slider-tracks\">\n              {tracks.map(({ id, source, target }) => (\n                <Track\n                  key={id}\n                  source={source}\n                  target={target}\n                  getTrackProps={getTrackProps}\n                />\n              ))}\n            </div>\n          )}\n        </Tracks>\n      </Slider>\n      </div>\n    );\n  }\n}\n\nfunction randomData(chart) {\n  chart.data.datasets[0].data = Array.from({length: 64}, () => Math.random() * 2 - 1);\n  chart.update();\n  inference(chart.data.datasets[0].data)\n}\n\nfunction setvariable(net){\n  model = net;\n}\n\nasync function load_model(){\n  const net = await tf.loadLayersModel('https://raw.githubusercontent.com/vee-upatising/Anime-DCGAN/master/model.json').then(net => setvariable(net))\n}\n\nfunction inference(input){\n    input = tf.tensor(input,[1,64])\n    try {\n      output = model.predict(input)\n    }\n    catch(err) {\n      alert(\"Error! You do not have enough memory to perform this computation.\");\n    }\n    output = tf.squeeze(output,)\n    output = output.mul(255)\n    data = output.dataSync()\n    //create a buffer array\n    const buffer = new Uint8ClampedArray(64 * 64 * 4)\n    //create an Image data var \n    im = new ImageData(64, 64);\n\n    //map the values to the buffer\n    var i = 0;\n    for(var y = 0; y < 64; y++) {\n      for(var x = 0; x < 64; x++) {\n        var pos = (y * 64 + x) * 4;      // position in buffer based on x and y\n        buffer[pos  ] = data[i]             // some R value [0, 255]\n        buffer[pos+1] = data[i+1]           // some G value\n        buffer[pos+2] = data[i+2]           // some B value\n        buffer[pos+3] = 255;                // set alpha channel\n        i+=3\n      }\n    }\n\n    //set the buffer to the image data\n    im.data.set(buffer)\n    createImageBitmap(im).then(renderer => ctx.drawImage(renderer, 0,0, 256, 256))\n}\n\nexport function Handle({\n  handle: { id, value, percent },\n  getHandleProps\n}) {\n  return (\n    <div\n      style={{\n        left: `${percent}%`,\n        position: 'absolute',\n        marginLeft: -15,\n        marginTop: 25,\n        zIndex: 2,\n        width: 30,\n        height: 30,\n        border: 0,\n        textAlign: 'center',\n        cursor: 'pointer',\n        borderRadius: '50%',\n        backgroundColor: 'rgb(66,99,198)',\n        color: '#333',\n      }}\n      {...getHandleProps(id)}\n    >\n    </div>\n  )\n}\n\nfunction Track({ source, target, getTrackProps }) {\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        height: 10,\n        zIndex: 1,\n        marginTop: 35,\n        backgroundColor: 'rgb(66,99,198)',\n        borderRadius: 5,\n        cursor: 'pointer',\n        left: `${source.percent}%`,\n        width: `${target.percent - source.percent}%`,\n      }}\n      {...getTrackProps() /* this will set up events if you want it to be clickeable (optional) */}\n    />\n  )\n}\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}